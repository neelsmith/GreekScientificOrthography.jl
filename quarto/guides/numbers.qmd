# Formatting numeric tokens
```{julia}
#| warning: false
#| echo: false
#| output: false
using GreekScientificOrthography, Orthography
```

Manuscripts of Greek scientific and mathematical texts use the "Milesian" system of numeric notation.

## Integers in the "Milesian" system of notation

### Values from 1-999

The Milesian system is essentially a place-value system.  The 27 values for ones (1-9), tens (10-90), and hundreds (100-900) are noted with specific alphabetic characters in normal alphabetic order, with the additions of `œõ` for 6, `œô` for 90 and `œ°` for 900. 

::: {.callout-note}
Note that in `GreekScientificOrthography`, characters used to write the basic integer values *must be in lower-case*.
:::


::: {.column width="50%"}

| Ones | Tens | Hundreds |
| --- | --- | --- | 
| Œ± | Œπ  | œÅ |
| Œ≤ | Œ∫ | œÉ |
| Œ≥ | Œª | œÑ |
| Œ¥ | Œº | œÖ |
| Œµ| ŒΩ | œÜ |
| œõ | Œæ | œá |
| Œ∂| Œø | œà |
| Œ∑| œÄ | œâ |
| Œ∏  | œô | œ° |

:::


Since most of the characters used to write integers in the Milesian system can also be read as alphabetic characters, integer tokens are flagged with a special marker, the numeric tick mark, `Õ¥` (Unicode x0374). The integer value `1` is written like this:

```{julia}
#| output: false
one = "Œ±Õ¥" 
```



Like our place value notation, the left-to-right sequence of digits is always largest to smallest. Note that unlike our numeric notation, there is no need for a zero character to represent the absence of a value in the hundreds, tens or ones column, since the characters for each column are distinct.


```{julia}
#| output: false
eleven = "ŒπŒ±Õ¥"
one_hundred_one = "œÅŒ±Õ¥"
one_hundred_eleven = "œÅŒπŒ±Õ¥"
```

All of these are valid strings in a `GreekSciOrthography`.

```{julia}
ortho = stemortho()
validstring(one, ortho) == validstring(eleven, ortho) == validstring(one_hundred_one, ortho) == validstring(one_hundred_eleven, ortho)
```


A comma separates a thousands column (with values from 1,000 - 9,000) to the left of the comma, from hundreds, tens and ones values to the right of the comma, again just like our practice. The thousands column reuses the same characters as the ones column.

```{julia}
one_thousand_one = "Œ±,Œ±Õ¥"
validstring(one_thousand_one, ortho)
```

All of these strings represent a single integer token (type `MilesianIntegerToken`).

```{julia}
tokenize(one, ortho)
```


```{julia}
tokenize(one_thousand_one, ortho)
```

## Integers from 999-19,999

The value for 10,000 is written with the upper-case mu, `Œú` (for ŒºœÖœÅŒπ·Ω±œÇ, "myriad").

```{julia}
myriad = "ŒúÕ¥"
validstring(myriad, ortho)
```

Conventionally, the myriads value is written as a separate token separated by white space from the smaller columns. That means that the string for a value like 10,001 will be represented by two tokens. 

```{julia}
tenthousand_one = "ŒúÕ¥ Œ±Õ¥"
tokenize(tenthousand_one, ortho)
```

::: {.callout-note}
Greek manuscripts do not normally repeat the tick mark on the myriad marker; `GreekScientificOrthography` requires this to guarantee context-independent parsing of tokens.
:::


You can express whole numbers up to 19,999 in this way.

```{julia}
nineteen_999 = "ŒúÕ¥ Œ∏,œ°œôŒ∏Õ¥"
validstring(nineteen_999, ortho)
```

```{julia}
tokenize(nineteen_999, ortho)
```


## Integers greater than 19,999

To write values larger than 19,999, Milesian notation begins by multiplying the myriad character. In manuscripts, the multiplier is normally written above the `Œú`; in `GreekScientificOrthography`, we use the markdown convention for superscript that is supported by pandoc, among others, of bracketing the superscript value with carets. In this context, neither multiplicand requires the numeric tick.

20,000, for example, is written as Œú multiplied by Œ≤, like this example:

```{julia}
twentyk = "Œú^Œ≤^"
validstring(twentyk, ortho)
```


In an environment that supports pandoc's markdown extension, the multiplier will display as a superscript.

```{julia}
using Markdown
Markdown.parse(twentyk)
```


Archimedes uses this notation as he derives limiting values for *pi* in  his treatise  *Measurement of a Circle*. The value 349,450, for example, is written with these two tokens:

```{julia}
threefortynine450 = "Œú^ŒªŒ¥^ ,Œ∏œÖŒΩÕ¥"
Markdown.parse(threefortynine450)
```

```{julia}
tokenize(threefortynine450, ortho)
```



## Fractional values

`GreekScientificOrthography` includes characters for three fractional values that are often written in manuscripts with special symbols: `êÖµ` for one half (Unicode x10175), `êÖ∑` for two-thirds (Unicode x10177), and `êÖ∏` for three quarters (Unicode x10178).  (The package also makes these characters available with the contsant names `ONE_HALF`, `TWO_THIRDS` and `THREE_FOURTHS`.)

Apart from these special cases, the only notation for fractional values available to Greek mathematicians was to use normal integer notation, but flagged with a special double-prime marker indicating that this is a *reciprocal* value.  

```{julia}
sixth = "œõ‚Ä≥"
thirtysixth = "Œªœõ‚Ä≥"
validstring(sixth, ortho) == validstring(thirtysixth, ortho)
```

Other fractional values would be written as sums of these.  The fraction 2/3 can, for example, appear as 1/2 + 1/6, written simply as a succession of individual fractional tokens. As with integer values, the left-to-right sequence is from greatest to least, and the value of the sum of the tokens.

```{julia}
twothirds = "Œ≤‚Ä≥ œõ‚Ä≥"
tokenize(twothirds, ortho)
```

Fractions can of course be mixed with integer numbers.

```{julia}
six_and_twothirds = "œõÕ¥ Œ≤‚Ä≥ œõ‚Ä≥"
validstring(six_and_twothirds, stemortho())
```


```{julia}
tokenize(six_and_twothirds, stemortho())
```